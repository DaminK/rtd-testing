:py:mod:`ci_lib.decomposition.locanmf`
======================================

.. py:module:: ci_lib.decomposition.locanmf


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   ci_lib.decomposition.locanmf.locaNMF



Attributes
~~~~~~~~~~

.. autoapisummary::

   ci_lib.decomposition.locanmf.LOGGER
   ci_lib.decomposition.locanmf.DEVICE


.. py:data:: LOGGER
   

   

.. py:data:: DEVICE
   :annotation: = cpu

   

.. py:function:: locaNMF(DecompDataObject, atlas_path, logger=LOGGER, minrank=1, maxrank=10, min_pixels=100, loc_thresh=70, r2_thresh=0.99, nonnegative_temporal=False)

   
   Decomposes a DecompDataObject with locaNMF with seeds based on a Brain Atlas (TODO cite)
   TODO a bit more formal
   TODO types

   :param DecompDataObject: DecompDataObject with abitrary parcellation (Usually SVD)
   :type DecompDataObject: DecompDataObject

   :param atlas_path: Path to Dict containing the Brain Atlas (TODO Specify Format)
   :type atlas_path: String or pathlib.Path or None

   :param minrank: how many components per brain region. Set maxrank to around 10 for regular dataset.
   :param maxrank: how many components per brain region. Set maxrank to around 10 for regular dataset.
   :param min_pixels: minimum number of pixels in Allen map for it to be considered a brain region
   :param loc_thresh: Localization threshold, i.e. percentage of area restricted to be inside the 'Allen boundary
   :param r2_thresh: Fraction of variance in the data to capture with LocaNMF
   :param nonnegative_temporal: Do you want nonnegative temporal components? The data itself should also be nonnegative in this case.

   :param logger: The LOGGER object that all console outputs are piped into
   :type logger: LOGGER

   :return: DecompDataObject with Data-driven Spatials constrained to the Brain Regions in the Atlas.
   :rtype: DecompDataObject















   ..
       !! processed by numpydoc !!

