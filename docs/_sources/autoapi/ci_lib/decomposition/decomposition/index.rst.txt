:py:mod:`ci_lib.decomposition.decomposition`
============================================

.. py:module:: ci_lib.decomposition.decomposition


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   ci_lib.decomposition.decomposition.anatomical_parcellation
   ci_lib.decomposition.decomposition.fastICA



Attributes
~~~~~~~~~~

.. autoapisummary::

   ci_lib.decomposition.decomposition.LOGGER


.. py:data:: LOGGER
   

   

.. py:function:: anatomical_parcellation(DecompDataObject, atlas_path=None, ROI=[], logger=LOGGER)

   
   Decomposes a DecompDataObject into a anatomical parcellation based on a Brain Atlas

   :param DecompDataObject: DecompDataObject with abitrary parcellation (Usually SVD)
   :type DecompDataObject: DecompDataObject

   :param atlas_path: Path to Dict containing the Brain Atlas (TODO Specify Format)
   :type atlas_path: String or pathlib.Path or None

   :param ROI: Regions of interest to use
   :type ROI: [Strings] or None

   :param logger: The LOGGER object that all console outputs are piped into
   :type logger: LOGGER

   :return: Anatomically parcellated DecompDataObject with Spatials corresponding to the given Atlas.
   :rtype: DecompDataObject















   ..
       !! processed by numpydoc !!

.. py:function:: fastICA(DecompDataObject, n_comps)

   
   Decomposes an DecompDataObject with Independet Component Analysis

   :param DecompDataObject: DecompDataObject with abitrary parcellation (Usually SVD)
   :type DecompDataObject: DecompDataObject

   :param n_comps: Number of independent components (w.r.t. time).
   :type n_comps: int

   :return: DecompDataObject with Spatials corresponding to the independent components (w.r.t. time) obtianed by ICA.
   :rtype: DecompDataObject















   ..
       !! processed by numpydoc !!

